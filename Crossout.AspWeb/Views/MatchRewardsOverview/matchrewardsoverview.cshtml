@{
    Layout = "_Layout";
}

@using Crossout.AspWeb.Helper
@using Crossout.AspWeb.Models.Cod
@model MatchRewardsOverview
@{
    var loc = Model.Localizations;
}

<partial name="header" model="@Model" />

<div class="half-hd-container px-3">

    @if (WebSettings.Settings.EnableAds)
    {
        <partial name="leaderboardad" />
    }

    <div class="card my-1">
        <h4 class="card-title m-2">Match Rewards <span data-toggle="collapse" data-target="#helpWrapper"><svg class="feather-help-circle"><use xlink:href="/icons/feather-sprite.svg#help-circle" /></svg></span></h4>

        <div id="helpWrapper" class="collapse">
            <h5 class="m-2"><loc model="loc" category="shared" name="title.howitworks">How it works</loc></h5>

        </div>

        <div>
            <button id="dataAgeDropdown" type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Max. Match Age <svg class="feather-general"><use xlink:href="/icons/feather-sprite.svg#clock" /></svg>
            </button>
            <div class="dropdown-menu" aria-labelledby="dataAgeDropdown">
                <a class="dropdown-item">7 Days</a>
                <a class="dropdown-item">14 Days</a>
                <a class="dropdown-item active">30 Days</a>
                <a class="dropdown-item">90 Days</a>
            </div>

            <div class="d-flex justify-content-center">
                <button class="btn btn-outline-secondary d-flex flex-row" onclick="applyFilter()">Apply Filter</button>
                <div height="38" width="38"><div id="loadingIcon"><img height="38" width="38" src="~/icons/Spinner-1s-64px.svg" /></div></div>
            </div>
        </div>

        <div id="table-wrapper" class="d-none">
            <table class="table table-striped table-borderless table-hover dt-responsive" id="MatchRewardsTable">
                <thead>
                    <tr>
                        <th class="dt-col" id="missionCol">
                            Mission
                        </th>
                        <th class="dt-col" id="matchTypeCol">
                            Match Type
                        </th>
                        <th class="dt-col" id="averageResourcesCol">
                            Average Resources
                        </th>
                        <th class="dt-col" id="averageBaseExpCol">
                            Average Base Experience
                        </th>
                        <th class="dt-col" id="dataCountCol">
                            Data Count
                        </th>
                        <th class="dt-col" id="marketCol">
                            Market
                        </th>
                        <th class="dt-col never" id="resourceCol">
                            Resource Type
                        </th>
                    </tr>
                </thead>

                <tbody>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>

    var newerThanDays = 30;

    var domOption =
        "<'row m-1'<'d-inline-flex justify-content-start'p><'d-inline-flex ml-auto text-secondary'l>>" +
        "<tr>" +
        "<'row m-1'<'d-inline-flex justify-content-start'p><'d-none d-sm-inline-flex ml-auto text-secondary'i>>";

    $.fn.DataTable.ext.pager.numbers_length = 5;

    var order;
    var table;
    var cellWidth = '11%'
    var language = Cookies.get('language');
    var resourceBundles = [];

    function initTable(data) {
        order = [[getColumnIndexesById(['marketCol'])[0], "desc"]];
        table = $('#MatchRewardsTable').DataTable({
            data: data,
            deferRender: true,
            dataSrc: 'data',
            columns: [
                { data: 'missionName' },
                { data: 'matchType' },
                { data: 'formatAverageResources' },
                { data: 'formatAverageBaseExp' },
                { data: 'dataCount' },
                { data: null },
                { data: 'resource' }
            ],
            columnDefs: [
                {
                    'render': function (data, type, row) {
                        var resource = row.resource;
                        var resourceAmount = parseFloat(row.formatAverageResources);
                        var bundles = resourceBundles.filter(x => x.resourceKey === resource);
                        bundles.sort((a, b) => (a.sellPricePerUnit < b.sellPricePerUnit) ? 1 : -1);
                        var html = '';
                        bundles.forEach(function (e, i) {
                            html += '<div class="d-flex flex-row"><div class="mr-1">' + (resourceAmount * e.sellPricePerUnit).toFixed(2) + '<img height="14" src="/img/Coin.png" /></div><div><a href="/item/' + e.itemId + '"><img src="/img/items/' + e.itemId + '.png" height=32 width=32 />' + e.name + '</a></div></div>';
                        });
                        return '<div class="d-flex flex-column">' + html + '</div>';
                    },
                    'width': '25%',
                    'targets': getColumnIndexesById(['marketCol'])[0]
                },
                {
                    'targets': '_all',
                    'width': cellWidth
                }
            ],
            order: order,
            lengthMenu: [[10, 20, 50, -1], [10, 20, 50, "All"]],
            pagingType: "simple_numbers",
            dom: domOption,
            paging: false,
            searching: true,
            search: {
                smart: false,
                regex: false
            },
            autoWidth: false,

            responsive: {
                details: {
                    type: 'inline',
                    renderer: function (api, rowIdx, columns) {
                        var data = $.map(columns, function (col, i) {
                            return col.hidden ?
                                '<div class="d-inline-flex flex-column card p-1 px-2 m-2" data-dt-row="' + col.rowIndex + '" data-dt-column="' + col.columnIndex + '">' +
                                '<div class="font-weight-bold">' + col.title + '' + '</div> ' +
                                '<div>' + col.data + '</div>' +
                                '</div>' :
                                '';
                        }).join('');

                        return data ?
                            $('<div/>').append(data) :
                            false;
                    }
                }
            },
            drawCallback: function () { }
        });
        table.on('xhr.dt', function () {
            onXhr();
        });
        table.on('draw.dt', function () {
            onDraw();
        });
        table.on('select deselect', function (e, dt, type, indexes) {
            onSelect();
        });

        onDraw();
        onXhr();
    }

    var firedOnce = false;
    var selectedList = [];
    function onDraw() {
        lazyLoadInstance.update();

        $('table tbody td').addClass('align-middle');

        // Make table a bit prettier
        $('.dataTables_paginate > .pagination').addClass('pagination-sm');
    }

    function onXhr() {
        $('table tbody td').addClass('align-middle');

        $('#loadingIcon').removeClass('d-flex').addClass('d-none');
        $('#table-wrapper').removeClass('d-none');

    }

    function getColumnIndexesById(colIdArray) {
        var index = [];
        colIdArray.forEach(function (f, j) {
            $('.dt-col').each(function (i, e) {
                if ($(e).attr('id') === f) {
                    index.push(i);
                    return;
                }
            });
        });
        return index;
    }

    function fetchData() {
        $.ajax({
            url: '/data/matchrewards?newerthan=' + newerThanDays + 'l=' + language,
            dataType: 'json',
            success: function (json) {
                resourceBundles = json.resources;
                initTable(json.data);
            }
        });
    }

    fetchData();
</script>